# -*- coding: utf-8 -*-
"""Magang_Tugas Khusus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MkoHWKRp-mORcG8bLGs1HiTVG6hy6x9b
"""

import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import pylab as pl
import seaborn as sns

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Training.csv")

df.head(10)

df.info()

# Fungsi untuk melakukan pelabelan data kategorikal
def label_encoding(data):
    unique_values = data.unique()  # Mengambil nilai unik dari data

    # Membuat kamus untuk memetakan nilai unik ke kode
    value_to_code = {value: code for code, value in enumerate(unique_values)}

    # Mengganti nilai data dengan kode yang sesuai
    encoded_data = data.map(value_to_code)

    return encoded_data

# Melabeli kolom
df["source"] = label_encoding(df["source"])
df["kategori_ketepatan"] = label_encoding(df["kategori_ketepatan"])
df["kategori_tunggakan"] = label_encoding(df["kategori_tunggakan"])
df["kategori_lokasi_bayar"] = label_encoding(df["kategori_lokasi_bayar"])
df["kategori_usia"] = label_encoding(df["kategori_usia"])
df["usage_last_month"] = label_encoding(df["usage_last_month"])
df["usage_inet_2m_ago"] = label_encoding(df["usage_inet_2m_ago"])
df["usage_inet_3m_ago"] = label_encoding(df["usage_inet_3m_ago"])
df["usage_inet_4m_ago"] = label_encoding(df["usage_inet_4m_ago"])
df["kuota_1m_ago"] = label_encoding(df["kuota_1m_ago"])
df["kuota_2m_ago"] = label_encoding(df["kuota_2m_ago"])
df["kuota_3m_ago"] = label_encoding(df["kuota_3m_ago"])
df["kuota_4m_ago"] = label_encoding(df["kuota_4m_ago"])
df["speed"] = label_encoding(df["speed"])
df["kategori"] = label_encoding(df["kategori"])

df

df.describe().T.style.background_gradient(cmap='YlOrRd')

df.isnull().sum()

df_filtered = df[df['usia_ps'] % 12 == 0]

fig, ax = plt.subplots(1, 1, figsize=(15, 10))
plt.suptitle('Visualisasi Usia Berdasarkan Tahun', fontsize=25, color='teal')
ax = sns.countplot(x=df_filtered['usia_ps'], palette='viridis')
ax.set(xlabel="Usia PS")
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)
plt.tight_layout()
plt.show()

plt.figure(figsize=(25,8))
sns.heatmap(df.corr(),annot=True, fmt='.2f', cmap="rainbow")

df['kategori'].value_counts(ascending = True)

# Mengambil target
X = df[['kategori_ketepatan', 'kategori_tunggakan', 'kategori_lokasi_bayar', 'usage_last_month', 'usage_inet_2m_ago', 'usage_inet_3m_ago', 'usage_inet_4m_ago', 'kuota_1m_ago', 'kuota_2m_ago', 'kuota_3m_ago', 'kuota_4m_ago',
        'comp_last_month', 'comp_2m_ago', 'comp_3m_ago', 'comp_4m_ago', 'gangguan', 'is_rx_spec', 'kategori_usia', 'speed']]
y = df['kategori']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
import collections

classifiers = {
    "Logisitic Regression": LogisticRegression(),
    "Support Vector Classifier": SVC(),
    "Neural Network Classifier": MLPClassifier(),
    "Decision Tree Classifier": DecisionTreeClassifier(),
    "Gaussian Naive Bayes": GaussianNB(),
    "Random Forest": RandomForestClassifier()
}

from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score, classification_report

for key, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    training_score = cross_val_score(classifier, X_train, y_train, cv=5)

    # Make predictions on the test set
    y_pred = classifier.predict(X_test)

    # Calculate accuracy on the test set
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Classifier: {classifier.__class__.__name__} has accuracy on the test set: {accuracy * 100:.3f}%")
    print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

for key, classifier in classifiers.items():
    classifier.fit(X_train, y_train)
    training_score = cross_val_score(classifier, X_train, y_train, cv=5)

    # Generate confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    print(f"Confusion Matrix for {classifier.__class__.__name__}:")
    print(cm)

    # Display the confusion matrix
    cm_display = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[False, True])
    cm_display.plot()
    plt.title(f'Confusion Matrix for {classifier.__class__.__name__}')
    plt.show()

from google.colab import files
uploaded = files.upload()

df_pred = pd.read_csv("Prediksi.csv")

df_pred.head(10)

# Mengambil target
X_1 = df_pred[['kategori_ketepatan', 'kategori_tunggakan', 'kategori_lokasi_bayar', 'usage_last_month', 'usage_inet_2m_ago', 'usage_inet_3m_ago', 'usage_inet_4m_ago', 'kuota_1m_ago', 'kuota_2m_ago', 'kuota_3m_ago', 'kuota_4m_ago',
        'comp_last_month', 'comp_2m_ago', 'comp_3m_ago', 'comp_4m_ago', 'gangguan', 'is_rx_spec', 'kategori_usia', 'speed']]
y_1 = df_pred['kategori']

from sklearn.model_selection import train_test_split
X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size=0.2, random_state=42)

# Fungsi untuk melakukan pelabelan data kategorikal
def label_encoding(data):
    unique_values = data.unique()  # Mengambil nilai unik dari data

    # Membuat kamus untuk memetakan nilai unik ke kode
    value_to_code = {value: code for code, value in enumerate(unique_values)}

    # Mengganti nilai data dengan kode yang sesuai
    encoded_data = data.map(value_to_code)

    return encoded_data

# Melabeli kolom
df_pred["kategori_ketepatan"] = label_encoding(df_pred["kategori_ketepatan"])
df_pred["kategori_tunggakan"] = label_encoding(df_pred["kategori_tunggakan"])
df_pred["kategori_lokasi_bayar"] = label_encoding(df_pred["kategori_lokasi_bayar"])
df_pred["kategori_usia"] = label_encoding(df_pred["kategori_usia"])
df_pred["usage_last_month"] = label_encoding(df_pred["usage_last_month"])
df_pred["usage_inet_2m_ago"] = label_encoding(df_pred["usage_inet_2m_ago"])
df_pred["usage_inet_3m_ago"] = label_encoding(df_pred["usage_inet_3m_ago"])
df_pred["usage_inet_4m_ago"] = label_encoding(df_pred["usage_inet_4m_ago"])
df_pred["kuota_1m_ago"] = label_encoding(df_pred["kuota_1m_ago"])
df_pred["kuota_2m_ago"] = label_encoding(df_pred["kuota_2m_ago"])
df_pred["kuota_3m_ago"] = label_encoding(df_pred["kuota_3m_ago"])
df_pred["kuota_4m_ago"] = label_encoding(df_pred["kuota_4m_ago"])
df_pred["speed"] = label_encoding(df_pred["speed"])
df_pred["kategori"] = label_encoding(df_pred["kategori"])

df_pred

for key, classifier in classifiers.items():
    classifier.fit(X_train1, y_train1)
    training_score = cross_val_score(classifier, X_train1, y_train1, cv=5)

    # Make predictions on the test set
    y_pred = classifier.predict(X_test1)

    # Calculate accuracy on the test set
    accuracy = accuracy_score(y_test1, y_pred)
    print(f"Classifier: {classifier.__class__.__name__} has accuracy on the pred set: {accuracy * 100:.3f}%")
    print(classification_report(y_test1, y_pred))

from google.colab import files
uploaded = files.upload()

data = pd.read_csv("fh_odp_prediction_persentase.csv")

data.head(10)

data_filtered = data[data['persentase'] % 10 == 0]

fig, ax = plt.subplots(1, 1, figsize=(15, 10))
plt.suptitle('Akurasi Berdasarkan Cluster', fontsize=25, color='red')
ax = sns.countplot(x=data_filtered['persentase'], palette='gist_rainbow_r')
ax.set(xlabel="Akurasi")
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

# Get the counts
counts = data_filtered['persentase'].value_counts().sort_index()

# Display the counts
for i, count in enumerate(counts):
    ax.text(i, count, str(count), ha='center', va='bottom', fontsize=12)

plt.tight_layout()
plt.show()